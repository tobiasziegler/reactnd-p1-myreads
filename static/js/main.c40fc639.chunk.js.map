{"version":3,"sources":["Book.js","BooksAPI.js","SearchBooks.js","Bookshelf.js","ListBooks.js","App.js","index.js"],"names":["Book","_this$props","this","props","book","setShelf","react_default","a","createElement","className","style","width","height","backgroundImage","concat","imageLinks","thumbnail","value","shelf","onChange","event","target","disabled","title","authors","join","Component","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","fetch","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","maxResults","data","books","SearchBooks","state","matchBooks","searchResults","shelvedBooks","map","result","index","findIndex","updateQuery","_this","setState","trim","BooksAPI","results","error","nextProps","_this2","es","to","type","placeholder","key","src_Book","Bookshelf","name","filter","ListBooks","bookshelves","bookshelf","src_Bookshelf","BooksApp","b","_this3","path","render","src_SearchBooks","exact","src_ListBooks","React","ReactDOM","basename","process","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c40fc639.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Book extends Component {\n\tstatic propTypes = {\n\t\tbook: PropTypes.object.isRequired\n\t}\n\n\trender() {\n\t\tconst { book, setShelf } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"book\">\n\t\t\t\t<div className=\"book-top\">\n\t\t\t\t\t<div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\n\t\t\t\t\t<div className=\"book-shelf-changer\">\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tvalue={book.shelf}\n\t\t\t\t\t\t\tonChange={(event) => setShelf(book, event.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"none\" disabled>Move to...</option>\n\t\t\t\t\t\t\t<option value=\"currentlyReading\">Currently Reading</option>\n\t\t\t\t\t\t\t<option value=\"wantToRead\">Want to Read</option>\n\t\t\t\t\t\t\t<option value=\"read\">Read</option>\n\t\t\t\t\t\t\t<option value=\"none\">None</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"book-title\">{book.title}</div>\n\t\t\t\t<div className=\"book-authors\">{book.authors ? book.authors.join(', ') : '' }</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Book\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport Book from './Book'\nimport * as BooksAPI from './BooksAPI'\n\n\nclass SearchBooks extends Component {\n\tstate = {\n\t\tquery: '',\n\t\tbooks: []\n\t}\n\n\tstatic propTypes = {\n\t\tsetShelf: PropTypes.func.isRequired,\n\t\tshelvedBooks: PropTypes.array.isRequired\n\t}\n\n\t/*\n\t * Add shelf allocations to all of the books in the current search results.\n\t * The search results returned by the API are generic and don't have a\n\t * record of the shelves assigned within te current instance of the app.\n\t * This function will iterate through the results, check whether a matching\n\t * book is in the array of books assigned to shelves, and then assign the\n\t * shelf value if there is a match, or 'none' if no match is found.\n\t */\n\tmatchBooks = (searchResults, shelvedBooks) => {\n\t\treturn searchResults.map((result) => {\n\t\t\tconst index = shelvedBooks.findIndex((book) => {\n\t\t\t\treturn book.id === result.id\n\t\t\t})\n\n\t\t\tif (index !== -1) {\n\t\t\t\tresult.shelf = shelvedBooks[index].shelf\n\t\t\t} else {\n\t\t\t\tresult.shelf = 'none'\n\t\t\t}\n\n\t\t\treturn result\n\t\t})\n\t}\n\n\t/**\n\t * Update the query field and retrieve updated search results. If the query\n\t * is non-empty, an API call will retrieve search results and update the\n\t * state so the results will be displayed.\n\t */\n\tupdateQuery = (query) => {\n\t\tthis.setState({ query: query.trim() })\n\n\t\tif (query) {\n\t\t\tBooksAPI.search(query).then((results) => {\n\t\t\t\tif (!results.error) {\n\t\t\t\t\tresults = this.matchBooks(results, this.props.shelvedBooks)\n\n\t\t\t\t\tthis.setState({books: results})\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({books: []})\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({books: []})\n\t\t}\n\t}\n\n\t/**\n\t * Ensure that the shelf allocations are updated in the search results when\n\t * this component is receiving new props (i.e., when the app state has\n\t * updated).\n\t */\n\tcomponentWillReceiveProps(nextProps) {\n\t\tconst results = this.matchBooks(this.state.books, nextProps.shelvedBooks)\n\n\t\tthis.setState({books: results})\n\t}\n\n\trender() {\n\t\tconst { books } = this.state\n\t\tconst { setShelf } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"search-books\">\n\t\t\t\t<div className=\"search-books-bar\">\n\t\t\t\t\t<Link className=\"close-search\" to=\"/\">Close</Link>\n\t\t\t\t\t<div className=\"search-books-input-wrapper\">\n\t\t\t\t\t\t{/*\n\t\t\t\t\t\t\tNOTES: The search from BooksAPI is limited to a particular set of search terms.\n\t\t\t\t\t\t\tYou can find these search terms here:\n\t\t\t\t\t\t\thttps://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n\t\t\t\t\t\t\tHowever, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n\t\t\t\t\t\t\tyou don't find a specific author or title. Every search is limited by search terms.\n\t\t\t\t\t\t*/}\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Search by title or author\"\n\t\t\t\t\t\t\tvalue={this.state.query}\n\t\t\t\t\t\t\tonChange={(event) => this.updateQuery(event.target.value)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"search-books-results\">\n\t\t\t\t\t<ol className=\"books-grid\">\n\t\t\t\t\t\t{books.map((book) => (\n\t\t\t\t\t\t\t<li key={book.id}>\n\t\t\t\t\t\t\t\t<Book\n\t\t\t\t\t\t\t\t\tbook={book}\n\t\t\t\t\t\t\t\t\tsetShelf={setShelf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t)\n\t}\n}\n\nexport default SearchBooks\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Book from './Book'\n\nclass Bookshelf extends Component {\n\tstatic propTypes = {\n\t\tbooks: PropTypes.array.isRequired,\n\t\tid: PropTypes.string.isRequired,\n\t\tname: PropTypes.string.isRequired,\n\t\tsetShelf: PropTypes.func.isRequired\n\t}\n\n\trender() {\n\t\tconst { books, id, name, setShelf } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"bookshelf\">\n\t\t\t\t<h2 className=\"bookshelf-title\">{name}</h2>\n\t\t\t\t<div className=\"bookshelf-books\">\n\t\t\t\t\t<ol className=\"books-grid\">\n\t\t\t\t\t\t{books.filter(\n\t\t\t\t\t\t\tbook => id === book.shelf\n\t\t\t\t\t\t).map((book) => (\n\t\t\t\t\t\t\t<li key={book.id}>\n\t\t\t\t\t\t\t\t<Book\n\t\t\t\t\t\t\t\t\tbook={book}\n\t\t\t\t\t\t\t\t\tsetShelf={setShelf}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Bookshelf\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport Bookshelf from './Bookshelf'\n\nclass ListBooks extends Component {\n\tstatic propTypes = {\n\t\tbooks: PropTypes.array.isRequired,\n\t\tbookshelves: PropTypes.array.isRequired,\n\t\tsetShelf: PropTypes.func.isRequired\n\t}\n\n\trender() {\n\t\tconst { books, bookshelves, setShelf } = this.props\n\n\t\treturn (\n\t\t\t<div className=\"list-books\">\n\t\t\t\t<div className=\"list-books-title\">\n\t\t\t\t\t<h1>MyReads</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"list-books-content\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{bookshelves.map((bookshelf) => (\n\t\t\t\t\t\t\t<Bookshelf\n\t\t\t\t\t\t\t\tkey={bookshelf.id}\n\t\t\t\t\t\t\t\tbooks={books}\n\t\t\t\t\t\t\t\tid={bookshelf.id}\n\t\t\t\t\t\t\t\tname={bookshelf.name}\n\t\t\t\t\t\t\t\tsetShelf={setShelf}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"open-search\">\n\t\t\t\t\t<Link to=\"/search\">Add a book</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ListBooks\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport SearchBooks from './SearchBooks'\nimport ListBooks from './ListBooks'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\n\nclass BooksApp extends React.Component {\n    state = {\n        books: [],\n        bookshelves: [\n            {\n                id: 'currentlyReading',\n                name: 'Currently Reading'\n            },\n            {\n                id: 'wantToRead',\n                name: 'Want to Read'\n            },\n            {\n                id: 'read',\n                name: 'Read'\n            }\n        ]\n    }\n\n    /**\n     * Update the shelf assigned to a book. This is first done on the server\n     * via an API call, and then the local state is updated by filtering out\n     * the old record for the book and inserting a new one.\n     */\n    setShelf = (book, shelf) => {\n        BooksAPI.update(book, shelf).then(() => {\n            book.shelf = shelf\n\n            this.setState((state) => ({\n                books: state.books.filter((b) => b.id !== book.id).concat([book])\n            }))\n        })\n    }\n\n    /**\n     * Retrieve the full list of books assigned to shelves from the server when\n     * the app is first loaded.\n     */\n    componentDidMount() {\n        BooksAPI.getAll().then((books) => {\n            this.setState({ books: books })\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Route path='/search' render={() => (\n                    <SearchBooks\n                        setShelf={this.setShelf}\n                        shelvedBooks={this.state.books}\n                    />\n                )}/>\n                <Route exact path=\"/\" render={() => (\n                    <ListBooks\n                        books={this.state.books}\n                        bookshelves={this.state.bookshelves}\n                        setShelf={this.setShelf}\n                    />\n                )}/>\n            </div>\n        )\n    }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n\t<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}